<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.semi.mappers.StockMapper">
    <resultMap id="stockResult" type="Stock">
        <result column="STOCK_NO" property="stockNo"/>
        <result column="STOCK_EMP" property="stockEmp"/>
        <result column="STOCK_DATE" property="stockDate"/>
        <result column="EXP_DATE" property="expDate"/>
        <result column="STOCK_STATUS" property="stockStatus"/>
        <result column="MEM_NAME" property="memName"/>
        <result column="AMOUNT" property="amount"/>
        <result column="PRICE" property="price"/>
        <result column="STORAGE_NO" property="storageNo"/>
        <result column="PRODUCT_NO" property="productNo"/>
        <result column="STORE_ID" property="storeId"/>
    </resultMap>
    <resultMap id="stockProductResult" type="StockProduct">
        <result column="STOCK_NO" property="stockNo"/>
        <result column="PRODUCT_NO" property="productNo"/>
        <result column="STORAGE_NO" property="storageNo"/>
        <result column="AMOUNT" property="amount"/>
        <result column="PRICE" property="price"/>
        <result column="TAXPRICE" property="taxPrice"/>
        <result column="TAX" property="tax"/>
        <result column="PRODUCT_NAME" property="productName"/>
        <result column="PRODUCT_SIZE" property="productSize"/>
        <result column="COLOR" property="color"/>
        <result column="CATEGORY_NAME" property="categoryName"/>
        <result column="STORAGE_LOCATION" property="storageLocation"/>
    </resultMap>

    <select id="selectStockList" parameterType="Stock" resultMap="stockResult">
        SELECT STOCK_NO,
        MEM_NAME,
        TO_CHAR(STOCK_DATE, 'YYYY-MM-DD') AS STOCK_DATE,
        TO_CHAR(EXP_DATE, 'YYYY-MM-DD') AS EXP_DATE,
        STOCK_STATUS
        FROM STOCK S JOIN MEMBER M ON (EMP_NO = STOCK_EMP)
        WHERE S.STATUS = 'Y' OR S.STATUS = 'C'
        ORDER BY STOCK_NO
    </select>

    <select id="searchStockInList" parameterType="map" resultMap="stockResult">
        SELECT
        STOCK_NO,
        MEM_NAME,
        TO_CHAR(STOCK_DATE, 'YYYY-MM-DD') AS STOCK_DATE,
        TO_CHAR(EXP_DATE, 'YYYY-MM-DD') AS EXP_DATE,
        STOCK_STATUS
        FROM STOCK S JOIN MEMBER M ON (EMP_NO = STOCK_EMP)
        <where>
            <choose>
                <when test="stockStatus != null and stockStatus == 1">
                    AND STOCK_STATUS = 'STOCK_IN_REGISTERED'
                </when>
                <when test="stockStatus != null and stockStatus == 2">
                    AND STOCK_STATUS = 'STOCK_IN_PROGRESS'
                </when>
                <when test="stockStatus != null and stockStatus == 3">
                    AND STOCK_STATUS = 'STOCK_IN_COMPLETED'
                </when>
                <otherwise>
                    AND STOCK_STATUS IN ('STOCK_IN_REGISTERED', 'STOCK_IN_PROGRESS', 'STOCK_IN_COMPLETED')
                </otherwise>
            </choose>

            <if test="startDate != null and startDate != ''">
                AND STOCK_DATE BETWEEN #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND #{endDate}
            </if>
        </where>
        AND (S.STATUS = 'Y' OR S.STATUS = 'C')
        ORDER BY STOCK_NO
    </select>

    <select id="searchStockOutList" parameterType="map" resultMap="stockResult">
        SELECT
        STOCK_NO,
        MEM_NAME,
        TO_CHAR(STOCK_DATE, 'YYYY-MM-DD') AS STOCK_DATE,
        TO_CHAR(EXP_DATE, 'YYYY-MM-DD') AS EXP_DATE,
        STOCK_STATUS
        FROM STOCK S JOIN MEMBER M ON (EMP_NO = STOCK_EMP)
        <where>
            <choose>
                <when test="stockStatus != null and stockStatus == 1">
                    AND STOCK_STATUS = 'STOCK_OUT_REGISTERED'
                </when>
                <when test="stockStatus != null and stockStatus == 2">
                    AND STOCK_STATUS = 'STOCK_OUT_PROGRESS'
                </when>
                <when test="stockStatus != null and stockStatus == 3">
                    AND STOCK_STATUS = 'STOCK_OUT_COMPLETED'
                </when>
                <otherwise>
                    AND STOCK_STATUS IN ('STOCK_OUT_REGISTERED', 'STOCK_OUT_PROGRESS', 'STOCK_OUT_COMPLETED')
                </otherwise>
            </choose>

            <if test="startDate != null and startDate != ''">
                AND STOCK_DATE BETWEEN #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND #{endDate}
            </if>
        </where>
        AND (S.STATUS = 'Y' OR S.STATUS = 'C')
        ORDER BY STOCK_NO
    </select>

    <insert id="insertStockIn" parameterType="Stock">
        <selectKey keyProperty="stockNo" resultType="int" order="BEFORE">
            SELECT STOCK_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO STOCK (
        STOCK_NO,
        STOCK_EMP,
        EXP_DATE,
        STOCK_STATUS
        ) VALUES (
        #{stockNo},
        #{stockEmp},
        #{expDate},
        'STOCK_IN_REGISTERED'
        )
    </insert>

    <insert id="insertStockOut" parameterType="Stock">
        <selectKey keyProperty="stockNo" resultType="int" order="BEFORE">
            SELECT STOCK_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO STOCK (
        STOCK_NO,
        STOCK_EMP,
        EXP_DATE,
        STOCK_STATUS
        ) VALUES (
        #{stockNo},
        #{stockEmp},
        #{expDate},
        'STOCK_OUT_REGISTERED'
        )
    </insert>

    <insert id="insertStockProduct" parameterType="StockProduct">
        INSERT INTO STOCK_PRODUCT(
        STOCK_NO,
        PRODUCT_NO,
        STORAGE_NO,
        AMOUNT,
        PRICE,
        TAXPRICE,
        TAX
        ) VALUES(
        #{stockNo},
        #{productNo},
        #{storageNo},
        #{amount},
        #{price},
        #{taxPrice},
        <choose>
            <when test="tax == 0"> 'Y' </when>
            <when test="tax == 1"> 'N' </when>
            <otherwise> 'N' </otherwise>
        </choose>
        )
    </insert>

    <select id="selectStockProductList" parameterType="StockProduct" resultMap="stockProductResult">
        SELECT STOCK_NO,
        PRODUCT_NO,
        STORAGE_NO,
        AMOUNT,
        PRICE,
        TAXPRICE,
        TAX,
        PRODUCT_NAME,
        CATEGORY_NAME,
        PRODUCT_SIZE,
        COLOR
        FROM STOCK_PRODUCT JOIN STOCK USING(STOCK_NO)
        JOIN PRODUCT USING(PRODUCT_NO)
        JOIN CATEGORY USING(CATEGORY_NO)
        ORDER BY STOCK_NO, PRODUCT_NO
    </select>

    <update id="updateStockInStatus">
        UPDATE STOCK
        SET STOCK_STATUS = 'STOCK_IN_PROGRESS',
        MODIFY_DATE = SYSDATE
        WHERE STOCK_NO = #{stockNo}
    </update>

    <update id="updateStockOutStatus">
        UPDATE STOCK
        SET STOCK_STATUS = 'STOCK_OUT_PROGRESS',
        MODIFY_DATE = SYSDATE
        WHERE STOCK_NO = #{stockNo}
    </update>

    <update id="deleteStock">
        UPDATE STOCK SET STATUS = 'N'
        WHERE STOCK_NO = #{stockNo}
    </update>

    <delete id="deleteStockProduct">
        DELETE FROM STOCK_PRODUCT
        WHERE STOCK_NO = #{stockNo}
    </delete>

    <select id="selectStock" parameterType="Stock" resultMap="stockResult">
        SELECT STOCK_NO,
        MEM_NAME,
        TO_CHAR(STOCK_DATE, 'YYYY-MM-DD') AS STOCK_DATE,
        TO_CHAR(EXP_DATE, 'YYYY-MM-DD') AS EXP_DATE,
        STOCK_STATUS
        FROM STOCK S JOIN MEMBER M ON (EMP_NO = STOCK_EMP)
        WHERE (S.STATUS = 'Y' OR S.STATUS = 'C')
        AND STOCK_NO = #{stockNo}
    </select>

    <select id="selectStockProduct" parameterType="StockProduct" resultMap="stockProductResult">
        SELECT STOCK_NO,
        PRODUCT_NO,
        STORAGE_NO,
        AMOUNT,
        PRICE,
        TAXPRICE,
        TAX,
        PRODUCT_NAME,
        CATEGORY_NAME,
        PRODUCT_SIZE,
        COLOR,
        STORAGE_LOCATION
        FROM STOCK_PRODUCT JOIN STOCK USING(STOCK_NO)
        JOIN PRODUCT USING(PRODUCT_NO)
        JOIN CATEGORY USING(CATEGORY_NO)
        JOIN STORAGE USING(STORAGE_NO)
        WHERE STOCK_NO = #{stockNo}
        ORDER BY STOCK_NO, PRODUCT_NO
    </select>

    <update id="updateCompletedStockIn">
        UPDATE STOCK
        SET STOCK_STATUS = 'STOCK_IN_COMPLETED',
            MODIFY_DATE = SYSDATE
        WHERE STOCK_STATUS = 'STOCK_IN_PROGRESS'
        AND TRUNC(EXP_DATE) = TRUNC(SYSDATE)
    </update>

    <select id="selectCompletedStockIn" parameterType="Stock" resultMap="stockResult">
        SELECT STOCK_NO, PRODUCT_NO, STORAGE_NO, AMOUNT, PRICE, M.STORE_ID
        FROM STOCK S
        JOIN STOCK_PRODUCT USING(STOCK_NO)
        JOIN MEMBER M ON S.STOCK_EMP = M.EMP_NO
        WHERE S.STOCK_STATUS = 'STOCK_IN_COMPLETED'
        AND S.STATUS = 'Y'
    </select>
    <update id="updateStockProcessedStatus">
        UPDATE STOCK
        SET STATUS = 'C'
        WHERE STOCK_NO = #{stockNo}
    </update>

</mapper>